SPEC : 

General use and basic principles :

Each user has his own file storing each item he has, and if it is used, and what it is used for (XML)
Each item has its unique ID

When a user wants to request an item, he enters a "request [ID]" command. The programs find the user who has the item, and writes a request file, creating a request ID, commits it, and push it to the repo.
A notification system can be put in place by pulling modifications from the repo

A user can accept or deny a request by use a "request [--accept/--deny] [request ID]" command "request [--accept/--deny]" will accept/deny the last one. Accepting a request denies all pending requests for the same item.

Answering a request (manually or automatically) will delete the request file and create a response file, with its ID.
If accepted, it will remove the line corresponding to the item in the inventory, and put the item in a transfer file.
If desined, it will create a refusal file.

Once the requesting user gets the item, he uses the command "transfer [transfer ID]", deleting the tranfer file and adding the line to his inventory.
The user can clear his refusals by using the command "acknowledge [refusal ID]" or "acknowledge --all".

The files are written in XML.

IDs follow the UUID format, and as git, the first characters are sufficient if it leaves no ambiguity in the commands.

Repo structure :
- users
    - [name]
        - items.xml
        - [requests]
        - [transfers]
        - [denied]

Each folder contains the incoming requests, the incoming transfers, and the incoming refusals to facilitate eventual notification systems.

File naming scheme:
(r/t/d)-[ID].xml

Commands : 

    "request [ID]" requests an item (do we allow messages ? if we do, ammending the message will consist of creating a duplicate, because of the mess of modifying a file without conflict)
    "request (--accept/--deny) [ID]" accepts/deny a request (same question as above, but ammending won't be possible without a lot of mess, as answering a request deletes the request file)
    "acknowledge [ID]" acknowledges a specific refusal
    "acknowledge --all" acknowledges all refusals
    "transfer [ID]" finishes a transfer between users (MUST check for refusal first for the command bellow to work)
    "transfer --abort ([ID]/[user]:[ID])" creates a refusal file, and a transfer file going back to the original inventory, effectively aborting the transfer
